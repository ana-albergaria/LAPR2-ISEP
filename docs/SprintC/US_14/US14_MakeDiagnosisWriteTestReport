# US 14 - to make a diagnosis and write a report for a given test

## 1. Requirements Engineering

### 1.1. User Story Description

As a specialist doctor, I intend to make the diagnosis and write a report for a given test.

### 1.2. Customer Specifications and Clarifications

**From the specifications document:**

> "At the company's headquarters, the clinical chemistry technologist receives the samples (delivered
by a courier) and performs the chemical analysis, recording the results in the software application.
After completing the chemical analysis, the results of all chemical analyses are analysed by a
specialist doctor who makes a diagnosis and writes a report that afterwards will be delivered to the
client."


> "To facilitate and simplify the validation work performed by the specialist doctor, the application
uses an external module that is responsible for doing an automatic validation using test reference
values."
 

> "After the specialist doctor has completed the diagnosis, the results of the clinical analyses and the
report become available in the system and must be validated by the laboratory coordinator."


**From the client clarifications:**

> **Question:** Regarding the tests that the Specialist Doctor can write a report about. Should the SD chose from a list of tests? and Should him only receive a list of test that have completed all the previous steps?
>
> **Answer:** The system shows all tests ready (that have completed all the previous steps) to make the diagnosys and the Specialist Doctor selects one test. Then, the Specialist Doctor writes the report for the selected test.

>Read the whole answer [here](https://moodle.isep.ipp.pt/mod/forum/discuss.php?d=8250#p10889).

-

> **Question:** Is there a limit of characters for the report and the diagnosis that will be made by the Specialist Doctor?
>
> **Answer:** Yes, at most 400 words.

>Read the whole answer [here](https://moodle.isep.ipp.pt/mod/forum/discuss.php?d=8182#p10891).

-

> **Question:** What characterizes a diagnosis? What it needs to have in it to be a valid diagnosis?
> 
> **Answer:** The report contains the diagnosis. The report is free text and should have no more than 400 words.

>Read the whole answer [here](https://moodle.isep.ipp.pt/mod/forum/discuss.php?d=8292#p10897).

-

> **Question:** Can the Specialist Doctor edit a report once it has already been written? If yes, in what occasion should he be able to edit? Can he edit after the Laboratory Coordinator has already approved the report?
> 
> **Answer:** No. No.

>Read the whole answer [here](https://moodle.isep.ipp.pt/mod/forum/discuss.php?d=8268#p10898).



### 1.3. Acceptance Criteria

* **AC1:** The system shows all the tests ready to make the diagnosis.
* **AC2:** The specialist doctor selects one test.
* **AC3:** The report contains the diagnosis.
* **AC4:** The report is free text and should have no more than 400 words.


### 1.4. Found out Dependencies

* There is a dependency to "US4: Register a test to be performed to a registered client" since the specialist doctor must associate the results of the clinical analyses and the report available in the system to the respective test.
* There is a dependency to "US7: Register a new employee" since the specialist doctor must be registered in the application and login in order to make the results of the clinical analyses and the report available in the system.


### 1.5 Input and Output Data

**Input Data:**

* Typed data:
    * report

* Selected data:
    * test to make the diagnosis


**Output Data:**

* List of tests ready to make the diagnosis
* (In)Sucess of the operation


### 1.6. System Sequence Diagram (SSD)

![US014_SSD](US014_SSD.svg)


### 1.7 Other Relevant Remarks

The present US is held many times during the business. As the Company works in the analysis/testing field, it's crucial to analyse the test results and make a report, with the diagnosis, for the client.


## 2. OO Analysis

### 2.1. Relevant Domain Model Excerpt


![US014_DM](US014_DM.svg)


### 2.2. Other Remarks

n/a


## 3. Design - User Story Realization

### 3.1. Rationale

**The rationale grounds on the SSD interactions and the identified input/output data.**

| Interaction ID | Question: Which class is responsible for... | Answer  | Justification (with patterns)  |
|:-------------  |:--------------------- |:------------|:---------------------------- |
| Step 1: asks to make a diagnosis and make a report |	... interacting with the actor? | WriteReportUI | Pure Fabrication: there is no reason to assign this responsability to any existing class in the Domain Model. |
| | ... coordinating the US? | WriteReportController | Controller |
| Step 2: shows list of tests ready to make a diagnosis and asks to selects one | ... knowing the tests to show? | TestStore | Pure Fabrication: for coupling reasons. There is no reason to assign this responsability to any existing class in the Domain Model. |
| | ... knowing the TestStore? | Company | Pure Fabrication: Company knows the TestStore.
| Step 3: selects a test | ... saving the selected test? | Report | IE: test is associated with the report object. |
| Step 4: requests data(i.e., report) |	... asking the user for this data? | WriteReportUI | IE: is responsible for the user interaction. |
| Step 5: types requested data | ... saving the inputted data? | Report | IE: report is associated with himself. |
| Step 6: shows the data and requests a confirmation | ... showing all data and requesting a confirmation? | WriteReportUI | IE: is responsible for user interactions. |              
| Step 7: confirms the data | ... saving the created report? | TestStore | IE: owns all its tests | 
| Step 8: informs operation success | ... informing operation success? | WriteReportUI | IE: is responsible for user interactions. |

### Systematization ##

According to the taken rationale, the conceptual classes promoted to software classes are:

* Class1
* Class2
* Class3

Other software classes (i.e. Pure Fabrication) identified:
* xxxxUI
* xxxxController

## 3.2. Sequence Diagram (SD)

*In this section, it is suggested to present an UML dynamic view stating the sequence of domain related software objects' interactions that allows to fulfill the requirement.*

![US014_SD](US014_SD.svg)

## 3.3. Class Diagram (CD)

*In this section, it is suggested to present an UML static view representing the main domain related software classes that are involved in fulfilling the requirement as well as and their relations, attributes and methods.*

![US014_CD](US014_CD.svg)

# 4. Tests
*In this section, it is suggested to systematize how the tests were designed to allow a correct measurement of requirements fulfilling.*

**_DO NOT COPY ALL DEVELOPED TESTS HERE_**

**Test 1:** Check that it is not possible to create an instance of the Example class with null values.

	@Test(expected = IllegalArgumentException.class)
		public void ensureNullIsNotAllowed() {
		Exemplo instance = new Exemplo(null, null);
	}

*It is also recommended to organize this content by subsections.*

# 5. Construction (Implementation)

*In this section, it is suggested to provide, if necessary, some evidence that the construction/implementation is in accordance with the previously carried out design. Furthermore, it is recommeded to mention/describe the existence of other relevant (e.g. configuration) files and highlight relevant commits.*

*It is also recommended to organize this content by subsections.*

# 6. Integration and Demo

*In this section, it is suggested to describe the efforts made to integrate this functionality with the other features of the system.*


# 7. Observations

*In this section, it is suggested to present a critical perspective on the developed work, pointing, for example, to other alternatives and or future related work.*
