@startuml
skinparam classAttributeIconSize 0

class CreateEmployeeUI {
}

class RegisterEmployeeController {
+createEmployee(empDTO)
+saveEmployee()
+getRoles()
+makeEmployeeAUser()
+makeEmployeeAnUserAndSendPassword()
}

class Employee {
- OrgRole role
- String employeeID
- String name
- String address
- String phoneNumber
- String email
- String socCode
- List<Employee> empList
+Employee(role, name, address, phoneNumber, email, socCode)
+getEmployeeId()
+getName()
+getAddress()
+getPhoneNumber()
+getEmail()
+getSocCode()
+getRole()
+toString()
+equals(otherObject)
+generateEmployeeID(name)
+checkRoleRules()
+checkNameRules()
+checkAddressRules()
+checkPhoneNumberRules()
+checkEmailRules()
+checkSocCodeRules()


}

class SpecialistDoctor {
- doctorIndexNumber
}

class OrgRole {
- description
}

class OrgRoleDto {
- description
+ getDescription()
}

class EmployeeDto {
- roleDesignation
- employeeID
- name
- address
- phoneNumber
- e-Mail
- socCode
+getName()
+getAddress()
+getPhoneNumber()
+getEmail()
+getSocCode()
+getRoleDesignation()
+Employee(roleDesignation, employeeID, name, address, phoneNumber, e-Mail, socCode)
+getEmployeeId()
+getName()
+getAddress()
+getPhoneNumber()
+getEmail()
+getSocCode()
}

class SpecialistDoctorDto {
}

class User {
}

CreateEmployeeUI ..> RegisterEmployeeController
Employee <|-- SpecialistDoctor
RegisterEmployeeController ..> Employee
RegisterEmployeeController ..> SpecialistDoctor
CreateEmployeeUI ..> EmployeeDto
CreateEmployeeUI ..> SpecialistDoctorDto
RegisterEmployeeController ..> EmployeeDto
RegisterEmployeeController ..> SpecialistDoctorDto
RegisterEmployeeController ..> OrgRoleDto
CreateEmployeeUI ..> OrgRoleDto
RegisterEmployeeController ..> Company
RegisterEmployeeController ..> OrgRole

EmployeeDto <|-- SpecialistDoctorDto

Employee "*" -- "1" OrgRole : has/plays >
Company "1" -- "*" OrgRole : comprehends >
Company "*" -- "1" Employee : employ >
Employee "0..1" -- "1" User : relates to >

RegisterEmployeeController ..> User


@enduml